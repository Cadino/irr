#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.4
#  in conjunction with Tcl version 8.6
#    Sep 27, 2020 10:12:49 AM CAT  platform: Linux

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import configure_support
import os.path
import time

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    root = tk.Tk()
    configure_support.set_Tk_var()
    top = ToplevelSetting (root)
    configure_support.init(root, top)
    root.mainloop()

w = None
def create_ToplevelSetting(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_ToplevelSetting(root, *args, **kwargs)' .'''
    global w, w_win, root
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    configure_support.set_Tk_var()
    top = ToplevelSetting (w)
    configure_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_ToplevelSetting():
    global w
    w.destroy()
    w = None





class ToplevelSetting:
    

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        configure_support.Hum1=0
        configure_support.Hum2=0
        configure_support.Hum3=0
        configure_support.Hum4=0
        v=list()
        v1=list()
        v2=list()
        v3=list()
        var1 = tk.IntVar(0)
        print(len(v))
        
        
        def SboxVald():
            print("Valvula change")
            self.Label2.configure(state='disabled')
            self.edt_tempo_hora.configure(state='disabled')
            self.btn_add.configure(state='disabled')
            self.edt_tempo_min.configure(state='disabled')
            self.Label6.configure(state='disabled')
            self.Cbtn_using_time.configure(offvalue=0)
            self.edt_hum.focus_set()
            self.Cbtn_using_time.deselect()
            self.edt_hum.delete(0,tk.END)
            if self.sbox_valvulas.get()=="Valvula 1":
                v.clear()
            elif self.sbox_valvulas.get()=="Valvula 2":
                v1.clear()
            elif self.sbox_valvulas.get()=="Valvula 3":
                v2.clear() 
            elif self.sbox_valvulas.get()=="Valvula 4":
                v3.clear()

            


        def callbackHum(e):
            if e.isdigit() and len(e) < 3:
                self.edt_hum.configure(background="#ffffff")
                return True
            elif e=="":
               return True
            else:
               return False

        def callbackTemHor(e):
            if e.isdigit() and len(e) == 1 and int(e) < 3:
                self.edt_tempo_hora.configure(background="#ffffff")
                self.edt_tempo_min.configure(background="#ffffff")
                return True
            elif e.isdigit() and len(e) == 2:
                self.edt_tempo_min.focus_set()
                return True
            elif e=="":
                return True
            else:
               return False

        def callbackTemMin(e):
            if e.isdigit() and len(e) == 1 and int(e) < 6:
                return True
            elif e.isdigit() and len(e) == 2:
                return True
            elif e=="":
                return True
            else:
                return False


        def ableUsingTime():
            if (var1.get() == 1):
                self.edt_tempo_min.configure(state='normal')
                self.edt_tempo_hora.configure(state='normal')
                self.Label2.configure(state='normal')  
                self.edt_tempo_hora.delete(0,tk.END)
                self.edt_tempo_min.delete(0,tk.END)
                self.btn_add.configure(state='normal')
                self.Label6.configure(state='normal')
                self.edt_tempo_hora.focus_set()
            elif (var1.get() == 0):
                self.Label2.configure(state='disabled')
                self.edt_tempo_hora.configure(state='disabled')
                self.btn_add.configure(state='disabled')
                self.edt_tempo_min.configure(state='disabled')
                self.Label6.configure(state='disabled')

        def addConfig():
            print("Salvar configure")
            if len(self.edt_tempo_hora.get() and self.edt_tempo_min.get()) == 0:
                print("Error file create")
                self.edt_tempo_hora.configure(background="#ff0000")
                self.edt_tempo_min.configure(background="#ff0000")
            else: 
    
                self.edt_tempo_hora.focus_set()

                if self.sbox_valvulas.get()=="Valvula 1":
                    if(len(configure_support.temp1)<=2):
                        v.append(self.edt_tempo_hora.get()+":"+self.edt_tempo_min.get())
                        
                        for value in configure_support.temp1: 
                            print(value)

                    else:
                        self.edt_tempo_hora.configure(background="#00ff00")
                        self.edt_tempo_min.configure(background="#00ff00")    
                        self.Label2.configure(state='disabled')
                        self.edt_tempo_hora.configure(state='disabled')
                        self.btn_add.configure(state='disabled')
                        self.edt_tempo_min.configure(state='disabled')
                        self.Label6.configure(state='disabled') 
                                   
                    self.edt_tempo_hora.delete(0,tk.END)
                    self.edt_tempo_min.delete(0,tk.END)
                    self.edt_tempo_hora.configure(background="#ffffff")
                    self.edt_tempo_min.configure(background="#ffffff")

                elif self.sbox_valvulas.get()=="Valvula 2":
                    if(len(configure_support.temp2)<=2):
                        v1.append(self.edt_tempo_hora.get()+":"+self.edt_tempo_min.get())
                        for value in configure_support.temp2: 
                            print(value)
                    else:
                        self.edt_tempo_hora.configure(background="#00ff00")
                        self.edt_tempo_min.configure(background="#00ff00")    
                        self.Label2.configure(state='disabled')
                        self.edt_tempo_hora.configure(state='disabled')
                        self.btn_add.configure(state='disabled')
                        self.edt_tempo_min.configure(state='disabled')
                        self.Label6.configure(state='disabled') 
                    self.edt_tempo_hora.delete(0,tk.END)
                    self.edt_tempo_min.delete(0,tk.END)
                    self.edt_tempo_hora.configure(background="#ffffff")
                    self.edt_tempo_min.configure(background="#ffffff")
                elif self.sbox_valvulas.get()=="Valvula 3":
                    if(len(configure_support.temp3)<=2):
                        v2.append(self.edt_tempo_hora.get()+":"+self.edt_tempo_min.get())
                        for value in v2: 
                            print(value)
                    else:
                        self.edt_tempo_hora.configure(background="#00ff00")
                        self.edt_tempo_min.configure(background="#00ff00")    
                        self.Label2.configure(state='disabled')
                        self.edt_tempo_hora.configure(state='disabled')
                        self.btn_add.configure(state='disabled')
                        self.edt_tempo_min.configure(state='disabled')
                        self.Label6.configure(state='disabled') 
                    self.edt_tempo_hora.delete(0,tk.END)
                    self.edt_tempo_min.delete(0,tk.END)
                    self.edt_tempo_hora.configure(background="#ffffff")
                    self.edt_tempo_min.configure(background="#ffffff")
                elif self.sbox_valvulas.get()=="Valvula 4":
                    if(len(configure_support.temp4)<=2):
                        v3.append(self.edt_tempo_hora.get()+":"+self.edt_tempo_min.get())
                        for value in v3: 
                            print(value)
                    else:
                        self.edt_tempo_hora.configure(background="#00ff00")
                        self.edt_tempo_min.configure(background="#00ff00")    
                        self.Label2.configure(state='disabled')
                        self.edt_tempo_hora.configure(state='disabled')
                        self.btn_add.configure(state='disabled')
                        self.edt_tempo_min.configure(state='disabled')
                        self.Label6.configure(state='disabled') 
                    self.edt_tempo_hora.delete(0,tk.END)
                    self.edt_tempo_min.delete(0,tk.END)
                    self.edt_tempo_hora.configure(background="#ffffff")
                    self.edt_tempo_min.configure(background="#ffffff")
                                   
                 

        def salvarConfig():
            print("time add")
            if len(self.edt_hum.get()) == 0 :
                print("Error time add")
                self.edt_hum.configure(background="#ff0000")
                if var1.get()==1:
                    self.edt_tempo_hora.configure(background="#ff0000")
                    self.edt_tempo_min.configure(background="#ff0000")
                    
            else:
                if self.sbox_valvulas.get()=="Valvula 1":
                    configure_support.Hum1=int(self.edt_hum.get())
                    configure_support.seg1=int(configure_support.seg.get())
                    configure_support.ter1=int(configure_support.ter.get())
                    configure_support.qua1=int(configure_support.qua.get())
                    configure_support.qui1=int(configure_support.qui.get())
                    configure_support.sex1=int(configure_support.sex.get())
                    configure_support.sab1=int(configure_support.sab.get())
                    configure_support.dom1=int(configure_support.dom.get())
                    configure_support.temp1=v
                elif self.sbox_valvulas.get()=="Valvula 2":
                    configure_support.Hum2=int(self.edt_hum.get())
                    configure_support.seg2=int(configure_support.seg.get())
                    configure_support.ter2=int(configure_support.ter.get())
                    configure_support.qua2=int(configure_support.qua.get())
                    configure_support.qui2=int(configure_support.qui.get())
                    configure_support.sex2=int(configure_support.sex.get())
                    configure_support.sab2=int(configure_support.sab.get())
                    configure_support.dom2=int(configure_support.dom.get())
                    configure_support.temp2=v1
                elif self.sbox_valvulas.get()=="Valvula 3":
                    configure_support.Hum3=int(self.edt_hum.get())
                    configure_support.seg3=int(configure_support.seg.get())
                    configure_support.ter3=int(configure_support.ter.get())
                    configure_support.qua3=int(configure_support.qua.get())
                    configure_support.qui3=int(configure_support.qui.get())
                    configure_support.sex3=int(configure_support.sex.get())
                    configure_support.sab3=int(configure_support.sab.get())
                    configure_support.dom3=int(configure_support.dom.get())
                    configure_support.temp3=v2
                elif self.sbox_valvulas.get()=="Valvula 4":
                    configure_support.Hum4=int(self.edt_hum.get())
                    configure_support.seg4=int(configure_support.seg.get())
                    configure_support.ter4=int(configure_support.ter.get())
                    configure_support.qua4=int(configure_support.qua.get())
                    configure_support.qui4=int(configure_support.qui.get())
                    configure_support.sex4=int(configure_support.sex.get())
                    configure_support.sab4=int(configure_support.sab.get())
                    configure_support.dom4=int(configure_support.dom.get())
                    configure_support.temp4=v3
                print("File create")
                
                

            
        top.geometry("547x522+450+108")
        top.minsize(1, 1)
        top.maxsize(1351, 738)
        top.resizable(0, 0)
        top.title("Config")
        top.configure(background="#fff")
        top.configure(highlightbackground="#fff")
        top.configure(highlightcolor="black")

        self.lbl_config = tk.Label(top)
        self.lbl_config.place(relx=0.272, rely=0.132, height=21, width=265)
        self.lbl_config.configure(activebackground="#f9f9f9")
        self.lbl_config.configure(background="#fff")
        self.lbl_config.configure(justify='left')
        self.lbl_config.configure(text='''Humidade do solo para rega''')

    
        self.edt_hum = tk.Entry(top, validate ="key", validatecommand =(top.register(callbackHum),'%P')) 
        self.edt_hum.place(relx=0.347, rely=0.192,height=21, relwidth=0.358)
        self.edt_hum.configure(background="white")
        self.edt_hum.configure(font="TkFixedFont")
        self.edt_hum.configure(selectbackground="blue")
        self.edt_hum.configure(selectforeground="white")
        self.edt_hum.focus_set()

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.037, rely=0.077, height=97, width=121)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(background="#fff")
        photo_location = os.path.join(prog_location,"./rsz_definicao.gif")
        global _img0
        _img0 = tk.PhotoImage(file=photo_location)
        self.Label1.configure(image=_img0)
        self.Label1.configure(text='''Label''')

        var1 = tk.IntVar(0)
        self.Cbtn_using_time = tk.Checkbutton(top)
        self.Cbtn_using_time.place(relx=0.329, rely=0.498, relheight=0.071
                , relwidth=0.353)
        self.Cbtn_using_time.configure(activebackground="#f9f9f9")
        self.Cbtn_using_time.configure(background="#fff")
        self.Cbtn_using_time.configure(highlightbackground="#fff")
        self.Cbtn_using_time.configure(justify='left')
        self.Cbtn_using_time.configure(state='active')
        self.Cbtn_using_time.configure(text='''Rega por tempo''')
        self.Cbtn_using_time.configure(variable=var1)
        self.Cbtn_using_time.configure(offvalue=0)
        self.Cbtn_using_time.configure(command=ableUsingTime)


        self.edt_tempo_hora = tk.Entry(top, validate ="key", validatecommand =(top.register(callbackTemHor),'%P')) 
        self.edt_tempo_hora.place(relx=0.274, rely=0.69, height=41
                , relwidth=0.066)
        self.edt_tempo_hora.configure(background="white")
        self.edt_tempo_hora.configure(font="TkFixedFont")
        self.edt_tempo_hora.configure(selectbackground="blue")
        self.edt_tempo_hora.configure(selectforeground="white")
        self.edt_tempo_hora.configure(state='disabled')
        self.edt_tempo_hora.configure(textvariable=configure_support.edt_tempo)

        self.btn_save_config = tk.Button(top)
        self.btn_save_config.place(relx=0.247, rely=0.812, height=29, width=65)
        self.btn_save_config.configure(activebackground="#f9f9f9")
        self.btn_save_config.configure(text='''Salvar''')
        self.btn_save_config.configure(command=salvarConfig)

        self.btn_cancelar = tk.Button(top)
        self.btn_cancelar.place(relx=0.444, rely=0.812, height=29, width=80)
        self.btn_cancelar.configure(activebackground="#f9f9f9")
        self.btn_cancelar.configure(command=configure_support.cancelarConfig)
        self.btn_cancelar.configure(text='''Cancelar''')

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.219, rely=0.613, height=18, width=265)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(background="#fff")
        self.Label2.configure(highlightbackground="#fff")
        self.Label2.configure(justify='left')
        self.Label2.configure(state='disabled')
        self.Label2.configure(text='''Tempos de rega''')

        self.btn_add = tk.Button(top)
        self.btn_add.place(relx=0.512, rely=0.69, height=39, width=69)
        self.btn_add.configure(activebackground="#f9f9f9")
        self.btn_add.configure(state='disabled')
        self.btn_add.configure(text='''Adicionar''')
        self.btn_add.configure(textvariable=configure_support.add_tempo)
        self.btn_add.configure(command=addConfig)

        self.Label3 = tk.Label(top)
        self.Label3.place(relx=0.296, rely=0.927, height=29, width=265)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(background="#ffffff")
        self.Label3.configure(text='''Desenvolvido por Cyber Z Moz''')

        self.sbox_valvulas = tk.Spinbox(top, from_=1.0, to=100.0)
        self.sbox_valvulas.place(relx=0.293, rely=0.307, relheight=0.061
                , relwidth=0.488)
        self.sbox_valvulas.configure(activebackground="#f9f9f9")
        self.sbox_valvulas.configure(background="white")
        self.sbox_valvulas.configure(font="TkDefaultFont")
        self.sbox_valvulas.configure(highlightbackground="black")
        self.sbox_valvulas.configure(selectbackground="blue")
        self.sbox_valvulas.configure(selectforeground="white")
        self.sbox_valvulas.configure(textvariable=configure_support.sbox_val)
        self.value_list = ['Valvula 1','Valvula 2','Valvula 3','Valvula 4',]
        self.sbox_valvulas.configure(values=self.value_list)
        self.sbox_valvulas.configure(command=SboxVald)

        self.Label4 = tk.Label(top)
        self.Label4.place(relx=0.274, rely=0.249, height=29, width=265)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(background="#fff")
        self.Label4.configure(text='''Valvulas por acionar''')

        self.btn_aplicar_config = tk.Button(top)
        self.btn_aplicar_config.place(relx=0.667, rely=0.812, height=29
                , width=69)
        self.btn_aplicar_config.configure(activebackground="#f9f9f9")
        self.btn_aplicar_config.configure(command=configure_support.aplicarConfig)
        self.btn_aplicar_config.configure(text='''Aplicar''')

        self.edt_tempo_min = tk.Entry(top, validate ="key", validatecommand =(top.register(callbackTemMin),'%P')) 
        self.edt_tempo_min.place(relx=0.384, rely=0.69, height=41
                , relwidth=0.066)
        self.edt_tempo_min.configure(background="white")
        self.edt_tempo_min.configure(font="TkFixedFont")
        self.edt_tempo_min.configure(selectbackground="blue")
        self.edt_tempo_min.configure(selectforeground="white")
        self.edt_tempo_min.configure(state='disabled')

        self.Label6 = tk.Label(top)
        self.Label6.place(relx=0.347, rely=0.709, height=19, width=16)
        self.Label6.configure(activebackground="#f9f9f9")
        self.Label6.configure(background="#fff")
        self.Label6.configure(text=''':''')

        self.Labelframe1 = tk.LabelFrame(top)
        self.Labelframe1.place(relx=0.11, rely=0.383, relheight=0.086
                , relwidth=0.786)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(text='''Dias de rega''')
        self.Labelframe1.configure(background="#fff")

        self.ckb_seg = tk.Checkbutton(self.Labelframe1)
        self.ckb_seg.place(relx=0.028, rely=0.444, relheight=0.467
                , relwidth=0.119, bordermode='ignore')
        self.ckb_seg.configure(activebackground="#f9f9f9")
        self.ckb_seg.configure(background="#fff")
        self.ckb_seg.configure(highlightbackground="#fff")
        self.ckb_seg.configure(justify='left')
        self.ckb_seg.configure(text='''Seg''')
        self.ckb_seg.configure(variable=configure_support.seg)

        self.ckb_ter = tk.Checkbutton(self.Labelframe1)
        self.ckb_ter.place(relx=0.163, rely=0.444, relheight=0.467
                , relwidth=0.093, bordermode='ignore')
        self.ckb_ter.configure(activebackground="#f9f9f9")
        self.ckb_ter.configure(background="#fff")
        self.ckb_ter.configure(highlightbackground="#fff")
        self.ckb_ter.configure(justify='left')
        self.ckb_ter.configure(text='''Ter''')
        self.ckb_ter.configure(variable=configure_support.ter)

        self.ckb_qua = tk.Checkbutton(self.Labelframe1)
        self.ckb_qua.place(relx=0.279, rely=0.444, relheight=0.467
                , relwidth=0.119, bordermode='ignore')
        self.ckb_qua.configure(activebackground="#f9f9f9")
        self.ckb_qua.configure(background="#fff")
        self.ckb_qua.configure(highlightbackground="#fff")
        self.ckb_qua.configure(justify='left')
        self.ckb_qua.configure(text='''Qua''')
        self.ckb_qua.configure(variable=configure_support.qua)

        self.ckb_qui = tk.Checkbutton(self.Labelframe1)
        self.ckb_qui.place(relx=0.419, rely=0.444, relheight=0.467, relwidth=0.1
                , bordermode='ignore')
        self.ckb_qui.configure(activebackground="#f9f9f9")
        self.ckb_qui.configure(background="#fff")
        self.ckb_qui.configure(highlightbackground="#fff")
        self.ckb_qui.configure(justify='left')
        self.ckb_qui.configure(text='''Qui''')
        self.ckb_qui.configure(variable=configure_support.qui)

        self.ckb_sex = tk.Checkbutton(self.Labelframe1)
        self.ckb_sex.place(relx=0.535, rely=0.444, relheight=0.467
                , relwidth=0.123, bordermode='ignore')
        self.ckb_sex.configure(activebackground="#f9f9f9")
        self.ckb_sex.configure(background="#fff")
        self.ckb_sex.configure(highlightbackground="#fff")
        self.ckb_sex.configure(justify='left')
        self.ckb_sex.configure(text='''Sex''')
        self.ckb_sex.configure(variable=configure_support.sex)

        self.ckb_sab = tk.Checkbutton(self.Labelframe1)
        self.ckb_sab.place(relx=0.651, rely=0.444, relheight=0.467
                , relwidth=0.123, bordermode='ignore')
        self.ckb_sab.configure(activebackground="#f9f9f9")
        self.ckb_sab.configure(background="#fff")
        self.ckb_sab.configure(highlightbackground="#fff")
        self.ckb_sab.configure(justify='left')
        self.ckb_sab.configure(text='''Sab''')
        self.ckb_sab.configure(variable=configure_support.sab)

        self.ckb_dom = tk.Checkbutton(self.Labelframe1)
        self.ckb_dom.place(relx=0.791, rely=0.444, relheight=0.467
                , relwidth=0.147, bordermode='ignore')
        self.ckb_dom.configure(activebackground="#f9f9f9")
        self.ckb_dom.configure(background="#fff")
        self.ckb_dom.configure(highlightbackground="#fff")
        self.ckb_dom.configure(justify='left')
        self.ckb_dom.configure(text='''Dom''')
        self.ckb_dom.configure(variable=configure_support.dom)

if __name__ == '__main__':
    vp_start_gui()





