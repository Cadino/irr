#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 5.4
#  in conjunction with Tcl version 8.6
#    Sep 27, 2020 10:12:36 AM CAT  platform: Linux

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True
from configparser import ConfigParser
from tkinter import messagebox as mb
def set_Tk_var():
    global hum_solo
    hum_solo = tk.StringVar()
    global che48
    che48 = tk.IntVar()
    global edt_tempo
    edt_tempo = tk.StringVar()
    global add_tempo
    add_tempo = tk.StringVar()
    add_tempo.set('Adicionar')
    global sbox_val
    sbox_val = tk.StringVar()
    global seg
    seg = tk.IntVar()
    global ter
    ter = tk.IntVar()
    global qua
    qua = tk.IntVar()
    global qui
    qui = tk.IntVar()
    global sex
    sex = tk.IntVar()
    global sab
    sab = tk.IntVar()
    global dom
    dom = tk.IntVar()
    global seg1
    seg1 = tk.IntVar()
    global ter1
    ter1 = tk.IntVar()
    global qua1
    qua1 = tk.IntVar()
    global qui1
    qui1 = tk.IntVar()
    global sex1
    sex1 = tk.IntVar()
    global sab1
    sab1 = tk.IntVar()
    global dom1
    dom1 = tk.IntVar()
    global seg2
    seg2 = tk.IntVar()
    global ter2
    ter2 = tk.IntVar()
    global qua2
    qua2 = tk.IntVar()
    global qui2
    qui2 = tk.IntVar()
    global sex2
    sex2 = tk.IntVar()
    global sab2
    sab2 = tk.IntVar()
    global dom2
    dom2 = tk.IntVar()
    global seg3
    seg3 = tk.IntVar()
    global ter3
    ter3 = tk.IntVar()
    global qua3
    qua3 = tk.IntVar()
    global qui3
    qui3 = tk.IntVar()
    global sex3
    sex3 = tk.IntVar()
    global sab3
    sab3 = tk.IntVar()
    global dom3
    dom3 = tk.IntVar()
    global seg4
    seg4 = tk.IntVar()
    global ter4
    ter4 = tk.IntVar()
    global qua4
    qua4 = tk.IntVar()
    global qui4
    qui4 = tk.IntVar()
    global sex4
    sex4 = tk.IntVar()
    global sab4
    sab4 = tk.IntVar()
    global dom4
    dom4 = tk.IntVar()
    global Hum1
    Hum1 = tk.IntVar()
    global Hum2
    Hum2 = tk.IntVar()
    global Hum3
    Hum1 = tk.IntVar()
    global Hum4
    Hum2 = tk.IntVar()
    global temp1
    temp1 = list()
    global temp2
    temp2 = list()
    global temp3
    temp3 = list()
    global temp4
    temp4 = list()

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def aplicarConfig():
    print('configure_support.aplicarConfig')
    if Hum1==0 :
       print("Erro Hum 0")
       mb.showerror('ERRO NA CONFIGURACAO',  
                         'CONFIGURE A VALVULA 1')
    elif Hum2==0 :
       print("Erro Hum 1")
       mb.showerror('ERRO NA CONFIGURACAO',  
                         'CONFIGURE A VALVULA 2')    
    elif Hum3==0 :
       print("Erro Hum 2")
       mb.showerror('ERRO NA CONFIGURACAO',  
                         'CONFIGURE A VALVULA 3')
    elif Hum4==0 :
       print("Erro Hum 3") 
       mb.showerror('ERRO NA CONFIGURACAO',  
                         'CONFIGURE A VALVULA 4')   
    else:
        config_object = ConfigParser()
        config_object["HUM_VALVULA1"] = {
    "Humidade": str(Hum1)

} 
        if(len(temp1)==0):
            temp1.append("NC")
            temp1.append("NC")
            temp1.append("NC")
        elif len(temp1)==1 :
            temp1.append("NC")
            temp1.append("NC")
        elif len(temp1)==2 :
            temp1.append("NC")      


        for var in list(range(len(temp1))):
            print(var)
            print(temp1)
        config_object["TEMPO_VALVULA1"] = {
    "tempV11": temp1[0],
    "tempV12": temp1[1],
    "tempV13": temp1[2]
}             
        config_object["DIAS_SEMANA_VALVULA1"] = {
    "0": str(seg1),
    "1": str(ter1),
    "2": str(qua1),
    "3": str(qui1),
    "4": str(sex1),
    "5": str(sab1),
    "6": str(dom1)
}
        config_object["HUM_VALVULA2"] = {
    "Humidade": str(Hum2)

}

        if(len(temp2)==0):
            temp2.append("NC")
            temp2.append("NC")
            temp2.append("NC")
        elif len(temp2)==1 :
            temp2.append("NC")
            temp2.append("NC")
        elif len(temp2)==2 :
            temp2.append("NC") 

        config_object["TEMPO_VALVULA2"] = {
    "tempV11": temp2[0],
    "tempV12": temp2[1],
    "tempV13": temp2[2]
}             
        config_object["DIAS_SEMANA_VALVULA2"] = {
    "0": str(seg2),
    "1": str(ter2),
    "2": str(qua2),
    "3": str(qui2),
    "4": str(sex2),
    "5": str(sab2),
    "6": str(dom2)
}
        config_object["HUM_VALVULA3"] = {
    "Humidade": str(Hum3)

}
        if(len(temp3)==0):
            temp3.append("NC")
            temp3.append("NC")
            temp3.append("NC")
        elif len(temp3)==1 :
            temp3.append("NC")
            temp3.append("NC")
        elif len(temp3)==2 :
            temp3.append("NC") 
        config_object["TEMPO_VALVULA3"] = {
    "tempV11": temp3[0],
    "tempV12": temp3[1],
    "tempV13": temp3[2]
}             
        config_object["DIAS_SEMANA_VALVULA3"] = {
    "0": str(seg3),
    "1": str(ter3),
    "2": str(qua3),
    "3": str(qui3),
    "4": str(sex3),
    "5": str(sab3),
    "6": str(dom3)
}
        config_object["HUM_VALVULA4"] = {
    "Humidade": str(Hum4)

}
        if(len(temp4)==0):
            temp4.append("NC")
            temp4.append("NC")
            temp4.append("NC")
        elif len(temp4)==1 :
            temp4.append("NC")
            temp4.append("NC")
        elif len(temp4)==2 :
            temp4.append("NC") 

        config_object["TEMPO_VALVULA4"] = {
    "tempV11": temp4[0],
    "tempV12": temp4[1],
    "tempV13": temp4[2]
}             
        config_object["DIAS_SEMANA_VALVULA4"] = {
    "0": "tutswiki.com",
    "0": str(seg4),
    "1": str(ter4),
    "2": str(qua4),
    "3": str(qui4),
    "4": str(sex4),
    "5": str(sab4),
    "6": str(dom4)
}
    
        with open('config.ini', 'w') as conf:
            config_object.write(conf)
        global root
        root.quit()

def cancelarConfig():
    print('configure_support.cancelarConfig')
    global root
    root.quit()

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import configure
    configure.vp_start_gui()




