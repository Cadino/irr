#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.4
#  in conjunction with Tcl version 8.6
#    Aug 28, 2020 08:58:55 PM CAT  platform: Linux

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import configure_support
import os.path

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    root = tk.Tk()
    configure_support.set_Tk_var()
    top = ToplevelSetting (root)
    configure_support.init(root, top)
    root.mainloop()

w = None
def create_ToplevelSetting(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_ToplevelSetting(root, *args, **kwargs)' .'''
    global w, w_win, root
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    configure_support.set_Tk_var()
    top = ToplevelSetting (w)
    configure_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_ToplevelSetting():
    global w
    w.destroy()
    w = None

class ToplevelSetting:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("405x345+368+106")
        top.minsize(1, 1)
        top.maxsize(1351, 738)
        top.resizable(1, 1)
        top.title("Config")
        top.configure(background="#fff")
        top.configure(highlightbackground="#fff")
        top.configure(highlightcolor="black")

        self.lbl_config = tk.Label(top)
        self.lbl_config.place(relx=0.272, rely=0.133, height=14, width=196)
        self.lbl_config.configure(activebackground="#f9f9f9")
        self.lbl_config.configure(background="#fff")
        self.lbl_config.configure(justify='left')
        self.lbl_config.configure(text='''Humidade do solo para rega''')

        self.edt_hum = tk.Entry(top)
        self.edt_hum.place(relx=0.272, rely=0.212,height=21, relwidth=0.484)
        self.edt_hum.configure(background="white")
        self.edt_hum.configure(font="TkFixedFont")
        self.edt_hum.configure(selectbackground="blue")
        self.edt_hum.configure(selectforeground="white")
        self.edt_hum.configure(textvariable=configure_support.hum_solo)

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.025, rely=0.032, height=64, width=90)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(background="#fff")
        photo_location = os.path.join(prog_location,"./rsz_definicao.gif")
        global _img0
        _img0 = tk.PhotoImage(file=photo_location)
        self.Label1.configure(image=_img0)
        self.Label1.configure(text='''Label''')

        self.Cbtn_using_time = tk.Checkbutton(top)
        self.Cbtn_using_time.place(relx=0.272, rely=0.464, relheight=0.07
                , relwidth=0.353)
        self.Cbtn_using_time.configure(activebackground="#f9f9f9")
        self.Cbtn_using_time.configure(background="#fff")
        self.Cbtn_using_time.configure(justify='left')
        self.Cbtn_using_time.configure(text='''Rega por tempo''')
        self.Cbtn_using_time.configure(textvariable=configure_support.conf_tempo_rega)
        self.Cbtn_using_time.configure(variable=configure_support.che48)

        self.edt_tempo = tk.Entry(top)
        self.edt_tempo.place(relx=0.272, rely=0.667,height=31, relwidth=0.262)
        self.edt_tempo.configure(background="white")
        self.edt_tempo.configure(font="TkFixedFont")
        self.edt_tempo.configure(selectbackground="blue")
        self.edt_tempo.configure(selectforeground="white")
        self.edt_tempo.configure(state='disabled')
        self.edt_tempo.configure(textvariable=configure_support.edt_tempo)

        self.btn_save_config = tk.Button(top)
        self.btn_save_config.place(relx=0.247, rely=0.812, height=29, width=65)
        self.btn_save_config.configure(activebackground="#f9f9f9")
        self.btn_save_config.configure(text='''Salvar''')

        self.btn_cancelar = tk.Button(top)
        self.btn_cancelar.place(relx=0.444, rely=0.812, height=29, width=80)
        self.btn_cancelar.configure(activebackground="#f9f9f9")
        self.btn_cancelar.configure(command=configure_support.cancelarConfig)
        self.btn_cancelar.configure(text='''Cancelar''')

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.272, rely=0.58, height=12, width=196)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(background="#fff")
        self.Label2.configure(justify='left')
        self.Label2.configure(state='disabled')
        self.Label2.configure(text='''Tempos de rega''')

        self.btn_add = tk.Button(top)
        self.btn_add.place(relx=0.593, rely=0.667, height=39, width=69)
        self.btn_add.configure(activebackground="#f9f9f9")
        self.btn_add.configure(state='disabled')
        self.btn_add.configure(text='''Adicionar''')
        self.btn_add.configure(textvariable=configure_support.add_tempo)

        self.Label3 = tk.Label(top)
        self.Label3.place(relx=0.296, rely=0.928, height=19, width=196)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(background="#ffffff")
        self.Label3.configure(text='''Desenvolvido por Cyber Z Moz''')

        self.sbox_valvulas = tk.Spinbox(top, from_=1.0, to=100.0)
        self.sbox_valvulas.place(relx=0.272, rely=0.348, relheight=0.061
                , relwidth=0.489)
        self.sbox_valvulas.configure(activebackground="#f9f9f9")
        self.sbox_valvulas.configure(background="white")
        self.sbox_valvulas.configure(font="TkDefaultFont")
        self.sbox_valvulas.configure(highlightbackground="black")
        self.sbox_valvulas.configure(selectbackground="blue")
        self.sbox_valvulas.configure(selectforeground="white")
        self.sbox_valvulas.configure(textvariable=configure_support.sbox_val)
        self.value_list = ['Todas valvulas','Valvula 1','Valvula 2','Valvula 3','Valvula 4',]
        self.sbox_valvulas.configure(values=self.value_list)

        self.Label4 = tk.Label(top)
        self.Label4.place(relx=0.247, rely=0.29, height=19, width=196)
        self.Label4.configure(background="#fff")
        self.Label4.configure(text='''Valvulas por acionar''')

        self.btn_aplicar_config = tk.Button(top)
        self.btn_aplicar_config.place(relx=0.667, rely=0.812, height=29
                , width=69)
        self.btn_aplicar_config.configure(command=configure_support.aplicarConfig)
        self.btn_aplicar_config.configure(text='''Aplicar''')

if __name__ == '__main__':
    vp_start_gui()





